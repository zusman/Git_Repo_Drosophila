library(dplyr)
install dplyr
install.packages("dplyr")
library(dplyr)
install.packages("purrr")
install.packages("openxlsx")
install.packages("minfi")
if (!require("BiocManager", quietly = TRUE))#
    install.packages("BiocManager")#
#
BiocManager::install("minfi")
library(IlluminaHumanMethylationEPICmanifest)
if (!require("BiocManager", quietly = TRUE))#
    install.packages("BiocManager")#
#
BiocManager::install("IlluminaHumanMethylationEPICmanifest")
library(IlluminaHumanMethylationEPICmanifest)
install.packages("minfi")
library("minfi")
install.packages("readr")
install.packages("tidyverse")
install.packages("Rcpp", repos="https://rcppcore.github.io/drat")
install.packages("Rcpp")
install.packages("readr")
if (!require("BiocManager", quietly = TRUE))#
    install.packages("BiocManager")#
#
BiocManager::install("IlluminaHumanMethylationEPICmanifest")
library(dplyr)
library("dplyr")
library(minfi)#
library(IlluminaHumanMethylationEPICmanifest)
basep <- "/Users/zainabusman/Home/HM/Kora_Fit/"#
path  <- paste0(basep,"analysis/")#
opath <- paste0(path,"in_progress/")#
mpath <- "/Users/zainabusman/Home/HM/Kora_Fit/MXYZ/ScanData/idat/"
mpath
load(file = paste0(path, "sample_sheets/sample_sheet_fit.RData"))
filenames <- paste0(mpath, ss_t$fileloc)
filenames
$fileloc
ss_t$fileloc
file.exists(paste0(filenames, "_Grn.idat")) %>% all %>% stopifnot
filenames
q()
filenames
file.exists("/Users/zainabusman/Home/HM/Kora_Fit/MXYZ/ScanData/idat/my_Red.idat", "_Red.idat")
file.exists(paste0(filenames))
file.exists(paste0(filenames)) %>% all %>% stopifnot
num_samps <- 50#
top_ind   <- ceiling(length(filenames)/num_samps)
message("Reading in ", i, " of ", top_ind)
top_ind
install.packages("magrittr")
install.packages("dplyr")
library(dplyr)
df <- data.frame(c1= c("a", "b", "c", "d"),)
df <- data.frame(c1= c("a", "b", "c", "d"), c2= c("e","f", "g", "h"), c3=c("i", "j", "k", "l"))
df cat ("the dimension of df is : ", "\n")
dim(df)
library("IlluminaHumanMethylationEPICmanifest")
library("IlluminaHumanMethylationEPICanno.ilm10b4.hg19")
head(df)
print(df)
clear
rm(list=ls())#
#
library(dplyr)#
library(purrr)#
#
basep <- "/Users/zainabusman/Home/HM/Kora_Fit/analysis/" #zu#
opath <- paste0(basep, "sample_sheets/") #zu#
spath <- paste0(basep,"sample_sheets/plate_layout/output/")#
dpath <- "/Users/zainabusman/Home/HM/Kora_Fit/MXYZ/"#
#
rm(list=ls())#
#
library(dplyr)#
library(purrr)#
#
basep <- "/Users/zainabusman/Home/HM/Kora_Fit/analysis/" #zu#
opath <- paste0(basep, "sample_sheets/") #zu#
spath <- paste0(basep,"sample_sheets/plate_layout/output/")#
dpath <- "/Users/zainabusman/Home/HM/Kora_Fit/MXYZ/"#
# loading the sample sheets #
ss_files <- dir(paste0(dpath, "SampleSheets/"), full.names = TRUE) %>% discard(~grepl("Test", .x))#
print(ss_files)
# reading the sample sheets#
print ("Reading sample sheets", ss)#
ss <- map(ss_files, read.csv, sep = ",", stringsAsFactors = F, skip = 10); rm(ss_files)#
print ("Reading sample sheets", ss)
ss
head(ss)
print(ss)
every(ss, ~ identical(colnames(.x), colnames(ss[[1]]))) %>% stopifnot
print (ever)
print (every)
print (ss)
every(ss, ~ identical(colnames(.x), colnames(ss[[1]]))) %>% stopifnot
ss_fin <- do.call(rbind, ss); rm(ss)
ss_fin
ss_files <- dir(paste0(dpath, "SampleSheets/"), full.names = TRUE) %>% discard(~grepl("Test", .x))#
print ("Loading sample sheets", ss_files)
rm(list=ls())#
#
library(dplyr)#
library(purrr)#
#
basep <- "/Users/zainabusman/Home/HM/Kora_Fit/analysis/" #zu#
opath <- paste0(basep, "sample_sheets/") #zu#
spath <- paste0(basep,"sample_sheets/plate_layout/output/")#
dpath <- "/Users/zainabusman/Home/HM/Kora_Fit/MXYZ/"
ss_files <- dir(paste0(dpath, "SampleSheets/"), full.names = TRUE) %>% discard(~grepl("Test", .x))
print ("Loading sample sheets", ss_files)
ss_files <- dir(paste0(dpath, "SampleSheets/"), full.names = TRUE) %>% discard(~grepl("Test", .x))
print ("Loading sample sheets", ss_files)
print("Loading sample sheets", ss_files)
ssfiles
rm(list = ls())#
#
library(minfi)#
library(IlluminaHumanMethylationEPICmanifest)#
library(dplyr)#
library(magrittr)#
# paths #
basep <- "/Users/zainabusman/Home/HM/Kora_Fit/"#
path  <- paste0(basep,"analysis/")#
opath <- paste0(path,"in_progress/")#
mpath <- "/Users/zainabusman/Home/HM/Kora_Fit/MXYZ/"#
#
# read data#
load(file = paste0(path, "sample_sheets/sample_sheet_fit.RData"))#
#
# existence of all idat files#
filenames <- paste0(mpath, ss_t$fileloc)#
#filenames <- paste0(mpath, list.files(mpath))#
file.exists(paste0(filenames, "_Grn.idat")) %>% all %>% stopifnot#
file.exists(paste0(filenames, "_Red.idat")) %>% all %>% stopifnot#
#
#file.exists(paste0(filenames)) %>% all %>% stopifnot#
#file.exists(paste0(filenames)) %>% all %>% stopifnot#
#
# the number of samples to read in at once#
num_samps <- 50#
top_ind   <- ceiling(length(filenames)/num_samps)#
#
allOutput <- lapply(1:top_ind, function(i) {#
	message("Reading in ", i, " of ", top_ind)#
	#memory intensive: garbage collection#
	gc()#
#
	low_ind  <- (i-1) * num_samps + 1#
	high_ind <- min(length(filenames),i * num_samps)		#
#
	print(i)#
	print(c(low_ind, high_ind))#
	outfile <- paste0(opath, "intensities/intensities_", i, ".RData")#
#
	RGset <- tryCatch({read.metharray(filenames[low_ind:high_ind], verbose = TRUE,force = TRUE)},#
				error=function(e) return(NULL))#
	if (is.null(RGset)) return(-999)#
	# Illumina background subtraction #
	RGset <- bgcorrect.illumina(RGset)                   #
#
	samp_names <- sampleNames(RGset)#
#
	# Type II probes: getting probe information & intensities#
	TypeII.Name  <- getProbeInfo(RGset, type = "II")$Name                                       #the names of the Type II probes#
	TypeII.Green <- as.data.frame(getGreen(RGset)[getProbeInfo(RGset, type = "II")$AddressA, ]) #intensities, green #
	TypeII.Red   <- as.data.frame(getRed(RGset)  [getProbeInfo(RGset, type = "II")$AddressA, ]) #intensities, red#
	rownames(TypeII.Red)   <- rownames(TypeII.Green) <- TypeII.Name #
	colnames(TypeII.Red)   <- colnames(TypeII.Green) <- samp_names#
#
	# Type I probes, split into green channel #
	TypeI.Green.Name <- getProbeInfo(RGset, type = "I-Green")$Name#
	TypeI.Green.M    <- as.data.frame(getGreen(RGset)[getProbeInfo(RGset, type = "I-Green")$AddressB, ])#
	TypeI.Green.U    <- as.data.frame(getGreen(RGset)[getProbeInfo(RGset, type = "I-Green")$AddressA, ])#
	rownames(TypeI.Green.M) <- rownames(TypeI.Green.U) <- TypeI.Green.Name#
	colnames(TypeI.Green.M) <- colnames(TypeI.Green.U) <- samp_names#
#
	# Type I probes, split into red channel#
	TypeI.Red.Name <- getProbeInfo(RGset, type = "I-Red")$Name#
	TypeI.Red.M <- as.data.frame(getRed(RGset)[getProbeInfo(RGset, type = "I-Red")$AddressB,])#
	TypeI.Red.U <- as.data.frame(getRed(RGset)[getProbeInfo(RGset, type = "I-Red")$AddressA,])#
	rownames(TypeI.Red.U) <- rownames(TypeI.Red.M) <- TypeI.Red.Name#
	colnames(TypeI.Red.U) <- colnames(TypeI.Red.M) <- samp_names#
#
	# getting the control probe info (only needed once)#
	controls <- getProbeInfo(RGset, type = "Control") #
	if (i == 1) save(controls, file = paste0(opath, "control_probes/control_info.RData")) #
#
	# extracting control probe values#
	message("Control probes ", i, " of ", top_ind)#
	#memory intensive: garbage collection#
	gc()#
	#Control probes (all samples)#
	types    <- unique(controls$Type)#
	#the non-negative control probes#
	types <- types[types != 'NEGATIVE']#
	ctrl.names   <- controls[controls$Type %in% types, 'ExtendedType']#
	ctrl.address <- controls[controls$Type %in% types, 'Address']#
	#green control probes#
	ctrl.Green               <- matrix(NA_real_, ncol = ncol(RGset), nrow = length(ctrl.names), dimnames = list(ctrl.names, samp_names))#
	ctrl.Green[ctrl.names, ] <- getGreen(RGset)[ctrl.address, ]#
	rownames(ctrl.Green)     <- paste0(rownames(ctrl.Green), '.grn')#
	#red control probes#
	ctrl.Red               <- matrix(NA_real_, ncol = ncol(RGset), nrow = length(ctrl.names), dimnames = list(ctrl.names, samp_names))#
	ctrl.Red[ctrl.names, ] <- getRed(RGset)[ctrl.address, ]#
	rownames(ctrl.Red)     <- paste0(rownames(ctrl.Red), '.red')#
	ctrl_all = rbind(ctrl.Green, ctrl.Red)#
	save(ctrl_all, file = paste0(opath,"control_probes/control_info_", i, ".RData")) #
    # detection p-values#
    dp <- detectionP(RGset, type = "m+u")#
#
    # saving#
    toReturn <- list(TypeII.Red    = TypeII.Red,    TypeII.Green = TypeII.Green, #
		    	     TypeI.Red.M   = TypeI.Red.M,   TypeI.Red.U = TypeI.Red.U,#
				     TypeI.Green.M = TypeI.Green.M, TypeI.Green.U = TypeI.Green.U,#
				     dp = dp)#
#
    message("about to save")#
    save(toReturn, file = outfile)#
#
    return(paste0(i, " successful"))#
})
rm(list = ls())#
#
library(minfi)#
library(IlluminaHumanMethylationEPICmanifest)#
library(dplyr)#
library(magrittr)#
# paths #
basep <- "/Users/zainabusman/Home/HM/Kora_Fit/"#
path  <- paste0(basep,"analysis/")#
opath <- paste0(path,"in_progress/")#
mpath <- "/Users/zainabusman/Home/HM/Kora_Fit/MXYZ/"#
#
# read data#
load(file = paste0(path, "sample_sheets/sample_sheet_fit.RData"))#
#
# existence of all idat files#
filenames <- paste0(mpath, ss_t$fileloc)#
#filenames <- paste0(mpath, list.files(mpath))#
file.exists(paste0(filenames, "_Grn.idat")) %>% all %>% stopifnot#
file.exists(paste0(filenames, "_Red.idat")) %>% all %>% stopifnot#
#
#file.exists(paste0(filenames)) %>% all %>% stopifnot#
#file.exists(paste0(filenames)) %>% all %>% stopifnot#
#
# the number of samples to read in at once
library(IlluminaHumanMethylationEPICmanifest)
library(dplyr)
library(purrr)
library(minfi)
basep <- "/Users/zainabusman/Home/HM/Kora_Fit/"#
path  <- paste0(basep,"analysis/")#
opath <- paste0(path,"in_progress/")#
mpath <- "/Users/zainabusman/Home/HM/Kora_Fit/MXYZ/"#
#
# read data#
load(file = paste0(path, "sample_sheets/sample_sheet_fit.RData"))#
#
# existence of all idat files#
filenames <- paste0(mpath, ss_t$fileloc)#
#filenames <- paste0(mpath, list.files(mpath))#
file.exists(paste0(filenames, "_Grn.idat")) %>% all %>% stopifnot#
file.exists(paste0(filenames, "_Red.idat")) %>% all %>% stopifnot
install.packages("base")
library(help = "utils")
source("/Users/zainabusman/Home/HM/Kora_Fit/Rplots.pdf")
source("/Users/zainabusman/RNAseq/Drosophila/dseq2/DESeq2_script")
library(DESeq2)#
library(pheatmap)#
library(pheatmap)#
library(dplyr)#
library(RColorBrewer)#
library(ggplot2)#
library(ggrepel)#
#
#path to directory#
setwd ('/Users/zainabusman/RNAseq/Drosophila/dseq2')#
#
#Load count data#
count_data <- read.csv('count_matrix.csv', header=TRUE, row.names=1)#
colnames(count_data)#
head(count_data)#
#
#Load sample info#
sample_info <- read.csv('design.csv', header=TRUE, row.names=1)#
colnames(sample_info)#
head(sample_info)#
#
#Set factor levels#
sample_info$Treatment <- factor(sample_info$Treatment)#
sample_info$Sequencing <- factor(sample_info$Sequencing)#
#
#Creatinf deseq object and importing count and sample info files#
dds <- DESeqDataSetFromMatrix(countData = count_data, colData = sample_info, design = ~Sequencing + Treatment)#
#Set reference for treatment factor#
dds$Treatment <- factor(dds$Treatment, levels = c("untreated", "treated"))#
#
#filtering genes#
keep <- rowSums(counts(dds)>10) >= min(table(sample_info$Treatment))#
dds <-dds[keep,]#
#
#Performing Statistical analysis to identify differentically expressed genes#
dds <- DESeq(dds)#
deseq_result <- results(dds)#
deseq_result#
#
#changing DSEQ object to R object(dataframe)#
deseq_result <- as.data.frame(deseq_result)#
class(deseq_result)#
head(deseq_result)#
#
#order the result table by increasing p value#
deseq_result_ordered <- deseq_result[order(deseq_result$pvalue),]#
head(deseq_result_ordered)#
#
#is FBgn0003360 gene differentially expressed?#
deseq_result["FBgn0003360",]#
#
#is Pasilla gene () downregulated by RNAi tretment#
deseq_result["FBgn0261552",]#
#EXtract the most differentially expressed genes due to the treatment#
#Select genes with a significant change in gene expression (adjusted p-value below 0.05)#
#filter by <0.05#
filtered <- deseq_result %>% filter(deseq_result$padj < 0.05)#
#
#filter by log of 1#
#
filtered <- filtered %>% filter(abs(filtered$log2FoldChange) > 1 )#
dim(deseq_result)#
dim(filtered)#
#
#Save deseq results (original data and filtered one)#
write.csv(deseq_result, 'de_result.all.csv')#
write.csv(filtered, 'de_result.filtered.csv')#
#
#Save normalized read counts#
normalized_counts <- counts(dds, normalized=TRUE)#
head(normalized_counts)#
write.csv(normalized_counts, 'normalized_counts.csv')#
#
#Visulatization DEseq Results#
plotDispEsts(dds)#
#
#PCA for Principal Component Analysis#
#perform variance stablizing transformation#
vsd <- vst(dds,blind=FALSE)#
#
#use transformed values to generate PCA plot#
plotPCA(vsd,intgroup=c("Sequencing", "Treatment"))#
#Heat Map for sample to sample distance matrix based on normalized counts#
#Generate sample to sample distance matrix#
sampleDists <- dist(t(assay(vsd)))#
sampleDistMatrix <- as.matrix(sampleDists)#
colnames(sampleDistMatrix)#
#
#Set color code#
#
colors <-colorRampPalette(rev(brewer.pal(9, "Reds")))(255)#
#
#Generate HeatMap#
pheatmap(sampleDistMatrix, clustering_distance_rows=sampleDists, clustering_distance_cols=sampleDists, col=colors)#
#
#HeatMap of log . Top 10 genes#
top_hits <- deseq_result[order(deseq_result$padj), ][1:10,]#
top_hits <- row.names(top_hits)#
top_hits#
#
#perform log transformation#
rld <- rlog(dds,blind=FALSE)#
pheatmap(assay(rld)[top_hits,], cluster_rows=FALSE, show_rownames=TRUE,cluster_cols=FALSE)#
pheatmap(assay(rld)[top_hits,])#
#
annot_info <- as.data.frame(colData(dds)[,c('Sequencing','Treatment')])#
pheatmap(assay(rld)[top_hits,], cluster_rows=FALSE, show_rownames=TRUE,cluster_cols=FALSE, annotation_col=annot_info)#
#
#Heatmap of Zscores#
cal_z_score <- function(x) {(x-mean(x)) / sd(x)}#
zscore_all <- t(apply(normalized_counts, 1, cal_z_score))#
zscore_subset <- zscore_all[top_hits,]#
pheatmap(zscore_subset)#
#
#MA plot#
plotMA(dds,ylim=c(-2,2))
S4_to_dataframe <- function(s4obj) {#
  nms <- slotNames(s4obj)#
#
  lst <- lapply(nms, function(nm) slot(s4obj, nm))#
  as.data.frame(setNames(lst, nms))#
}
S4_to_dataframe(dds_df)
dds_df = dds
S4_to_dataframe(dds_df)
print(typeof(dds))
source("/Users/zainabusman/RNAseq/Drosophila/dseq2/DESeq2.R")
